/**
 * generated by Xtext 2.12.0.M1
 */
package ase.queryDsl.impl;

import ase.queryDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class QueryDslFactoryImpl extends EFactoryImpl implements QueryDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static QueryDslFactory init()
  {
    try
    {
      QueryDslFactory theQueryDslFactory = (QueryDslFactory)EPackage.Registry.INSTANCE.getEFactory(QueryDslPackage.eNS_URI);
      if (theQueryDslFactory != null)
      {
        return theQueryDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new QueryDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case QueryDslPackage.MODEL: return createModel();
      case QueryDslPackage.QUERY_TYPE: return createQueryType();
      case QueryDslPackage.SELECT: return createSelect();
      case QueryDslPackage.SELECT_MEDICAL_RECORD: return createSelectMedicalRecord();
      case QueryDslPackage.SELECT_PATIENT_MONITORING: return createSelectPatientMonitoring();
      case QueryDslPackage.SELECT_PRESCRIPTION: return createSelectPrescription();
      case QueryDslPackage.INSERT: return createInsert();
      case QueryDslPackage.INSERT_MEDICAL_RECORD: return createInsertMedicalRecord();
      case QueryDslPackage.INSERT_PATIENT_MONITORING: return createInsertPatientMonitoring();
      case QueryDslPackage.INSERT_PRESCRIPTION: return createInsertPrescription();
      case QueryDslPackage.DROP: return createDrop();
      case QueryDslPackage.DELETE: return createDelete();
      case QueryDslPackage.DELETE_MEDICAL_RECORD: return createDeleteMedicalRecord();
      case QueryDslPackage.DELETE_PATIENT_MONITORING: return createDeletePatientMonitoring();
      case QueryDslPackage.DELETE_PRESCRIPTION: return createDeletePrescription();
      case QueryDslPackage.WHERE_MEDICAL_RECORD: return createWhereMedicalRecord();
      case QueryDslPackage.WHERE_PATIENT_MONITORING: return createWherePatientMonitoring();
      case QueryDslPackage.WHERE_PRESCRIPTION: return createWherePrescription();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QueryDslPackage.TABLE_NAME:
        return createTableNameFromString(eDataType, initialValue);
      case QueryDslPackage.VARIABLE_MEDICAL_RECORD:
        return createVariableMedicalRecordFromString(eDataType, initialValue);
      case QueryDslPackage.VARIABLE_PATIENT_MONITORING:
        return createVariablePatientMonitoringFromString(eDataType, initialValue);
      case QueryDslPackage.VARIABLE_PRESCRIPTION:
        return createVariablePrescriptionFromString(eDataType, initialValue);
      case QueryDslPackage.MEDICAL_CONDITION:
        return createMedicalConditionFromString(eDataType, initialValue);
      case QueryDslPackage.RISK_PERCEPTION:
        return createRiskPerceptionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QueryDslPackage.TABLE_NAME:
        return convertTableNameToString(eDataType, instanceValue);
      case QueryDslPackage.VARIABLE_MEDICAL_RECORD:
        return convertVariableMedicalRecordToString(eDataType, instanceValue);
      case QueryDslPackage.VARIABLE_PATIENT_MONITORING:
        return convertVariablePatientMonitoringToString(eDataType, instanceValue);
      case QueryDslPackage.VARIABLE_PRESCRIPTION:
        return convertVariablePrescriptionToString(eDataType, instanceValue);
      case QueryDslPackage.MEDICAL_CONDITION:
        return convertMedicalConditionToString(eDataType, instanceValue);
      case QueryDslPackage.RISK_PERCEPTION:
        return convertRiskPerceptionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryType createQueryType()
  {
    QueryTypeImpl queryType = new QueryTypeImpl();
    return queryType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Select createSelect()
  {
    SelectImpl select = new SelectImpl();
    return select;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelectMedicalRecord createSelectMedicalRecord()
  {
    SelectMedicalRecordImpl selectMedicalRecord = new SelectMedicalRecordImpl();
    return selectMedicalRecord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelectPatientMonitoring createSelectPatientMonitoring()
  {
    SelectPatientMonitoringImpl selectPatientMonitoring = new SelectPatientMonitoringImpl();
    return selectPatientMonitoring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelectPrescription createSelectPrescription()
  {
    SelectPrescriptionImpl selectPrescription = new SelectPrescriptionImpl();
    return selectPrescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Insert createInsert()
  {
    InsertImpl insert = new InsertImpl();
    return insert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InsertMedicalRecord createInsertMedicalRecord()
  {
    InsertMedicalRecordImpl insertMedicalRecord = new InsertMedicalRecordImpl();
    return insertMedicalRecord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InsertPatientMonitoring createInsertPatientMonitoring()
  {
    InsertPatientMonitoringImpl insertPatientMonitoring = new InsertPatientMonitoringImpl();
    return insertPatientMonitoring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InsertPrescription createInsertPrescription()
  {
    InsertPrescriptionImpl insertPrescription = new InsertPrescriptionImpl();
    return insertPrescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Drop createDrop()
  {
    DropImpl drop = new DropImpl();
    return drop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Delete createDelete()
  {
    DeleteImpl delete = new DeleteImpl();
    return delete;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeleteMedicalRecord createDeleteMedicalRecord()
  {
    DeleteMedicalRecordImpl deleteMedicalRecord = new DeleteMedicalRecordImpl();
    return deleteMedicalRecord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeletePatientMonitoring createDeletePatientMonitoring()
  {
    DeletePatientMonitoringImpl deletePatientMonitoring = new DeletePatientMonitoringImpl();
    return deletePatientMonitoring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeletePrescription createDeletePrescription()
  {
    DeletePrescriptionImpl deletePrescription = new DeletePrescriptionImpl();
    return deletePrescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhereMedicalRecord createWhereMedicalRecord()
  {
    WhereMedicalRecordImpl whereMedicalRecord = new WhereMedicalRecordImpl();
    return whereMedicalRecord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WherePatientMonitoring createWherePatientMonitoring()
  {
    WherePatientMonitoringImpl wherePatientMonitoring = new WherePatientMonitoringImpl();
    return wherePatientMonitoring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WherePrescription createWherePrescription()
  {
    WherePrescriptionImpl wherePrescription = new WherePrescriptionImpl();
    return wherePrescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableName createTableNameFromString(EDataType eDataType, String initialValue)
  {
    TableName result = TableName.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTableNameToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableMedicalRecord createVariableMedicalRecordFromString(EDataType eDataType, String initialValue)
  {
    VariableMedicalRecord result = VariableMedicalRecord.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVariableMedicalRecordToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariablePatientMonitoring createVariablePatientMonitoringFromString(EDataType eDataType, String initialValue)
  {
    VariablePatientMonitoring result = VariablePatientMonitoring.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVariablePatientMonitoringToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariablePrescription createVariablePrescriptionFromString(EDataType eDataType, String initialValue)
  {
    VariablePrescription result = VariablePrescription.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVariablePrescriptionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MedicalCondition createMedicalConditionFromString(EDataType eDataType, String initialValue)
  {
    MedicalCondition result = MedicalCondition.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMedicalConditionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RiskPerception createRiskPerceptionFromString(EDataType eDataType, String initialValue)
  {
    RiskPerception result = RiskPerception.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRiskPerceptionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryDslPackage getQueryDslPackage()
  {
    return (QueryDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static QueryDslPackage getPackage()
  {
    return QueryDslPackage.eINSTANCE;
  }

} //QueryDslFactoryImpl
