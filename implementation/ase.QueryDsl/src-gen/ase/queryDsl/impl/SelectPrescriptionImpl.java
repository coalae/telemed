/**
 * generated by Xtext 2.12.0.M1
 */
package ase.queryDsl.impl;

import ase.queryDsl.QueryDslPackage;
import ase.queryDsl.SelectPrescription;
import ase.queryDsl.VariablePrescription;
import ase.queryDsl.WherePrescription;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select Prescription</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ase.queryDsl.impl.SelectPrescriptionImpl#getVariablePrescription <em>Variable Prescription</em>}</li>
 *   <li>{@link ase.queryDsl.impl.SelectPrescriptionImpl#getVariablePrescriptionNext <em>Variable Prescription Next</em>}</li>
 *   <li>{@link ase.queryDsl.impl.SelectPrescriptionImpl#getWhere <em>Where</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectPrescriptionImpl extends SelectImpl implements SelectPrescription
{
  /**
   * The default value of the '{@link #getVariablePrescription() <em>Variable Prescription</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariablePrescription()
   * @generated
   * @ordered
   */
  protected static final VariablePrescription VARIABLE_PRESCRIPTION_EDEFAULT = VariablePrescription.PRESCRIPTION_ID;

  /**
   * The cached value of the '{@link #getVariablePrescription() <em>Variable Prescription</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariablePrescription()
   * @generated
   * @ordered
   */
  protected VariablePrescription variablePrescription = VARIABLE_PRESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariablePrescriptionNext() <em>Variable Prescription Next</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariablePrescriptionNext()
   * @generated
   * @ordered
   */
  protected EList<VariablePrescription> variablePrescriptionNext;

  /**
   * The cached value of the '{@link #getWhere() <em>Where</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhere()
   * @generated
   * @ordered
   */
  protected EList<WherePrescription> where;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectPrescriptionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QueryDslPackage.Literals.SELECT_PRESCRIPTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariablePrescription getVariablePrescription()
  {
    return variablePrescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariablePrescription(VariablePrescription newVariablePrescription)
  {
    VariablePrescription oldVariablePrescription = variablePrescription;
    variablePrescription = newVariablePrescription == null ? VARIABLE_PRESCRIPTION_EDEFAULT : newVariablePrescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION, oldVariablePrescription, variablePrescription));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VariablePrescription> getVariablePrescriptionNext()
  {
    if (variablePrescriptionNext == null)
    {
      variablePrescriptionNext = new EDataTypeEList<VariablePrescription>(VariablePrescription.class, this, QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION_NEXT);
    }
    return variablePrescriptionNext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<WherePrescription> getWhere()
  {
    if (where == null)
    {
      where = new EObjectContainmentEList<WherePrescription>(WherePrescription.class, this, QueryDslPackage.SELECT_PRESCRIPTION__WHERE);
    }
    return where;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QueryDslPackage.SELECT_PRESCRIPTION__WHERE:
        return ((InternalEList<?>)getWhere()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION:
        return getVariablePrescription();
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION_NEXT:
        return getVariablePrescriptionNext();
      case QueryDslPackage.SELECT_PRESCRIPTION__WHERE:
        return getWhere();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION:
        setVariablePrescription((VariablePrescription)newValue);
        return;
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION_NEXT:
        getVariablePrescriptionNext().clear();
        getVariablePrescriptionNext().addAll((Collection<? extends VariablePrescription>)newValue);
        return;
      case QueryDslPackage.SELECT_PRESCRIPTION__WHERE:
        getWhere().clear();
        getWhere().addAll((Collection<? extends WherePrescription>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION:
        setVariablePrescription(VARIABLE_PRESCRIPTION_EDEFAULT);
        return;
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION_NEXT:
        getVariablePrescriptionNext().clear();
        return;
      case QueryDslPackage.SELECT_PRESCRIPTION__WHERE:
        getWhere().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION:
        return variablePrescription != VARIABLE_PRESCRIPTION_EDEFAULT;
      case QueryDslPackage.SELECT_PRESCRIPTION__VARIABLE_PRESCRIPTION_NEXT:
        return variablePrescriptionNext != null && !variablePrescriptionNext.isEmpty();
      case QueryDslPackage.SELECT_PRESCRIPTION__WHERE:
        return where != null && !where.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (variablePrescription: ");
    result.append(variablePrescription);
    result.append(", variablePrescriptionNext: ");
    result.append(variablePrescriptionNext);
    result.append(')');
    return result.toString();
  }

} //SelectPrescriptionImpl
