/**
 * generated by Xtext 2.12.0.M1
 */
package ase.queryDsl.util;

import ase.queryDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ase.queryDsl.QueryDslPackage
 * @generated
 */
public class QueryDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QueryDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = QueryDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryDslSwitch<Adapter> modelSwitch =
    new QueryDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseQueryType(QueryType object)
      {
        return createQueryTypeAdapter();
      }
      @Override
      public Adapter caseSelect(Select object)
      {
        return createSelectAdapter();
      }
      @Override
      public Adapter caseSelectMedicalRecord(SelectMedicalRecord object)
      {
        return createSelectMedicalRecordAdapter();
      }
      @Override
      public Adapter caseSelectPatientMonitoring(SelectPatientMonitoring object)
      {
        return createSelectPatientMonitoringAdapter();
      }
      @Override
      public Adapter caseSelectPrescription(SelectPrescription object)
      {
        return createSelectPrescriptionAdapter();
      }
      @Override
      public Adapter caseInsert(Insert object)
      {
        return createInsertAdapter();
      }
      @Override
      public Adapter caseInsertMedicalRecord(InsertMedicalRecord object)
      {
        return createInsertMedicalRecordAdapter();
      }
      @Override
      public Adapter caseInsertPatientMonitoring(InsertPatientMonitoring object)
      {
        return createInsertPatientMonitoringAdapter();
      }
      @Override
      public Adapter caseInsertPrescription(InsertPrescription object)
      {
        return createInsertPrescriptionAdapter();
      }
      @Override
      public Adapter caseDrop(Drop object)
      {
        return createDropAdapter();
      }
      @Override
      public Adapter caseDelete(Delete object)
      {
        return createDeleteAdapter();
      }
      @Override
      public Adapter caseDeleteMedicalRecord(DeleteMedicalRecord object)
      {
        return createDeleteMedicalRecordAdapter();
      }
      @Override
      public Adapter caseDeletePatientMonitoring(DeletePatientMonitoring object)
      {
        return createDeletePatientMonitoringAdapter();
      }
      @Override
      public Adapter caseDeletePrescription(DeletePrescription object)
      {
        return createDeletePrescriptionAdapter();
      }
      @Override
      public Adapter caseWhereMedicalRecord(WhereMedicalRecord object)
      {
        return createWhereMedicalRecordAdapter();
      }
      @Override
      public Adapter caseWherePatientMonitoring(WherePatientMonitoring object)
      {
        return createWherePatientMonitoringAdapter();
      }
      @Override
      public Adapter caseWherePrescription(WherePrescription object)
      {
        return createWherePrescriptionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.QueryType <em>Query Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.QueryType
   * @generated
   */
  public Adapter createQueryTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.Select <em>Select</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.Select
   * @generated
   */
  public Adapter createSelectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.SelectMedicalRecord <em>Select Medical Record</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.SelectMedicalRecord
   * @generated
   */
  public Adapter createSelectMedicalRecordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.SelectPatientMonitoring <em>Select Patient Monitoring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.SelectPatientMonitoring
   * @generated
   */
  public Adapter createSelectPatientMonitoringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.SelectPrescription <em>Select Prescription</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.SelectPrescription
   * @generated
   */
  public Adapter createSelectPrescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.Insert <em>Insert</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.Insert
   * @generated
   */
  public Adapter createInsertAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.InsertMedicalRecord <em>Insert Medical Record</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.InsertMedicalRecord
   * @generated
   */
  public Adapter createInsertMedicalRecordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.InsertPatientMonitoring <em>Insert Patient Monitoring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.InsertPatientMonitoring
   * @generated
   */
  public Adapter createInsertPatientMonitoringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.InsertPrescription <em>Insert Prescription</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.InsertPrescription
   * @generated
   */
  public Adapter createInsertPrescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.Drop <em>Drop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.Drop
   * @generated
   */
  public Adapter createDropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.Delete <em>Delete</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.Delete
   * @generated
   */
  public Adapter createDeleteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.DeleteMedicalRecord <em>Delete Medical Record</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.DeleteMedicalRecord
   * @generated
   */
  public Adapter createDeleteMedicalRecordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.DeletePatientMonitoring <em>Delete Patient Monitoring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.DeletePatientMonitoring
   * @generated
   */
  public Adapter createDeletePatientMonitoringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.DeletePrescription <em>Delete Prescription</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.DeletePrescription
   * @generated
   */
  public Adapter createDeletePrescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.WhereMedicalRecord <em>Where Medical Record</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.WhereMedicalRecord
   * @generated
   */
  public Adapter createWhereMedicalRecordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.WherePatientMonitoring <em>Where Patient Monitoring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.WherePatientMonitoring
   * @generated
   */
  public Adapter createWherePatientMonitoringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ase.queryDsl.WherePrescription <em>Where Prescription</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ase.queryDsl.WherePrescription
   * @generated
   */
  public Adapter createWherePrescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //QueryDslAdapterFactory
