/*
 * generated by Xtext 2.12.0.M1
 */
package ase.serializer;

import ase.queryDsl.DeleteMedicalRecord;
import ase.queryDsl.DeletePatientMonitoring;
import ase.queryDsl.DeletePrescription;
import ase.queryDsl.Drop;
import ase.queryDsl.InsertMedicalRecord;
import ase.queryDsl.InsertPatientMonitoring;
import ase.queryDsl.InsertPrescription;
import ase.queryDsl.Model;
import ase.queryDsl.QueryDslPackage;
import ase.queryDsl.SelectMedicalRecord;
import ase.queryDsl.SelectPatientMonitoring;
import ase.queryDsl.SelectPrescription;
import ase.queryDsl.WhereMedicalRecord;
import ase.queryDsl.WherePatientMonitoring;
import ase.queryDsl.WherePrescription;
import ase.services.QueryDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class QueryDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QueryDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QueryDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QueryDslPackage.DELETE_MEDICAL_RECORD:
				sequence_DeleteMedicalRecord(context, (DeleteMedicalRecord) semanticObject); 
				return; 
			case QueryDslPackage.DELETE_PATIENT_MONITORING:
				sequence_DeletePatientMonitoring(context, (DeletePatientMonitoring) semanticObject); 
				return; 
			case QueryDslPackage.DELETE_PRESCRIPTION:
				sequence_DeletePrescription(context, (DeletePrescription) semanticObject); 
				return; 
			case QueryDslPackage.DROP:
				sequence_Drop(context, (Drop) semanticObject); 
				return; 
			case QueryDslPackage.INSERT_MEDICAL_RECORD:
				sequence_InsertMedicalRecord(context, (InsertMedicalRecord) semanticObject); 
				return; 
			case QueryDslPackage.INSERT_PATIENT_MONITORING:
				sequence_InsertPatientMonitoring(context, (InsertPatientMonitoring) semanticObject); 
				return; 
			case QueryDslPackage.INSERT_PRESCRIPTION:
				sequence_InsertPrescription(context, (InsertPrescription) semanticObject); 
				return; 
			case QueryDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case QueryDslPackage.SELECT_MEDICAL_RECORD:
				sequence_SelectMedicalRecord(context, (SelectMedicalRecord) semanticObject); 
				return; 
			case QueryDslPackage.SELECT_PATIENT_MONITORING:
				sequence_SelectPatientMonitoring(context, (SelectPatientMonitoring) semanticObject); 
				return; 
			case QueryDslPackage.SELECT_PRESCRIPTION:
				sequence_SelectPrescription(context, (SelectPrescription) semanticObject); 
				return; 
			case QueryDslPackage.WHERE_MEDICAL_RECORD:
				sequence_WhereMedicalRecord(context, (WhereMedicalRecord) semanticObject); 
				return; 
			case QueryDslPackage.WHERE_PATIENT_MONITORING:
				sequence_WherePatientMonitoring(context, (WherePatientMonitoring) semanticObject); 
				return; 
			case QueryDslPackage.WHERE_PRESCRIPTION:
				sequence_WherePrescription(context, (WherePrescription) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     QueryType returns DeleteMedicalRecord
	 *     Delete returns DeleteMedicalRecord
	 *     DeleteMedicalRecord returns DeleteMedicalRecord
	 *
	 * Constraint:
	 *     (whereMedicalRecord+=WhereMedicalRecord whereMedicalRecord+=WhereMedicalRecord*)
	 */
	protected void sequence_DeleteMedicalRecord(ISerializationContext context, DeleteMedicalRecord semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns DeletePatientMonitoring
	 *     Delete returns DeletePatientMonitoring
	 *     DeletePatientMonitoring returns DeletePatientMonitoring
	 *
	 * Constraint:
	 *     (wherepatientMonitoring+=WherePatientMonitoring wherepatientMonitoring+=WherePatientMonitoring*)
	 */
	protected void sequence_DeletePatientMonitoring(ISerializationContext context, DeletePatientMonitoring semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns DeletePrescription
	 *     Delete returns DeletePrescription
	 *     DeletePrescription returns DeletePrescription
	 *
	 * Constraint:
	 *     (whereprescription+=WherePrescription whereprescription+=WherePrescription*)
	 */
	protected void sequence_DeletePrescription(ISerializationContext context, DeletePrescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns Drop
	 *     Drop returns Drop
	 *
	 * Constraint:
	 *     table_name+=TableName
	 */
	protected void sequence_Drop(ISerializationContext context, Drop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns InsertMedicalRecord
	 *     Insert returns InsertMedicalRecord
	 *     InsertMedicalRecord returns InsertMedicalRecord
	 *
	 * Constraint:
	 *     (
	 *         recordId=INT 
	 *         patientId=INT 
	 *         doctorId=INT 
	 *         medicalCondition=MedicalCondition 
	 *         date=DATE 
	 *         price=DOUBLE 
	 *         description=STRING
	 *     )
	 */
	protected void sequence_InsertMedicalRecord(ISerializationContext context, InsertMedicalRecord semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__RECORD_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__RECORD_ID));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__PATIENT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__PATIENT_ID));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__DOCTOR_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__DOCTOR_ID));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__MEDICAL_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__MEDICAL_CONDITION));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__DATE));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__PRICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__PRICE));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_MEDICAL_RECORD__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertMedicalRecordAccess().getRecordIdINTTerminalRuleCall_2_0(), semanticObject.getRecordId());
		feeder.accept(grammarAccess.getInsertMedicalRecordAccess().getPatientIdINTTerminalRuleCall_4_0(), semanticObject.getPatientId());
		feeder.accept(grammarAccess.getInsertMedicalRecordAccess().getDoctorIdINTTerminalRuleCall_6_0(), semanticObject.getDoctorId());
		feeder.accept(grammarAccess.getInsertMedicalRecordAccess().getMedicalConditionMedicalConditionEnumRuleCall_8_0(), semanticObject.getMedicalCondition());
		feeder.accept(grammarAccess.getInsertMedicalRecordAccess().getDateDATETerminalRuleCall_10_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getInsertMedicalRecordAccess().getPriceDOUBLETerminalRuleCall_12_0(), semanticObject.getPrice());
		feeder.accept(grammarAccess.getInsertMedicalRecordAccess().getDescriptionSTRINGTerminalRuleCall_14_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns InsertPatientMonitoring
	 *     Insert returns InsertPatientMonitoring
	 *     InsertPatientMonitoring returns InsertPatientMonitoring
	 *
	 * Constraint:
	 *     (
	 *         monitoringId=INT 
	 *         patientId=INT 
	 *         category=MedicalCondition 
	 *         date=DATE 
	 *         riskPerception=RiskPerception 
	 *         treadted=BOOLEAN 
	 *         deviceId=INT
	 *     )
	 */
	protected void sequence_InsertPatientMonitoring(ISerializationContext context, InsertPatientMonitoring semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__MONITORING_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__MONITORING_ID));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__PATIENT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__PATIENT_ID));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__CATEGORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__CATEGORY));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__DATE));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__RISK_PERCEPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__RISK_PERCEPTION));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__TREADTED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__TREADTED));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__DEVICE_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PATIENT_MONITORING__DEVICE_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertPatientMonitoringAccess().getMonitoringIdINTTerminalRuleCall_2_0(), semanticObject.getMonitoringId());
		feeder.accept(grammarAccess.getInsertPatientMonitoringAccess().getPatientIdINTTerminalRuleCall_4_0(), semanticObject.getPatientId());
		feeder.accept(grammarAccess.getInsertPatientMonitoringAccess().getCategoryMedicalConditionEnumRuleCall_6_0(), semanticObject.getCategory());
		feeder.accept(grammarAccess.getInsertPatientMonitoringAccess().getDateDATETerminalRuleCall_8_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getInsertPatientMonitoringAccess().getRiskPerceptionRiskPerceptionEnumRuleCall_10_0(), semanticObject.getRiskPerception());
		feeder.accept(grammarAccess.getInsertPatientMonitoringAccess().getTreadtedBOOLEANTerminalRuleCall_12_0(), semanticObject.getTreadted());
		feeder.accept(grammarAccess.getInsertPatientMonitoringAccess().getDeviceIdINTTerminalRuleCall_14_0(), semanticObject.getDeviceId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns InsertPrescription
	 *     Insert returns InsertPrescription
	 *     InsertPrescription returns InsertPrescription
	 *
	 * Constraint:
	 *     (
	 *         prescriptionId=INT 
	 *         recordId=INT 
	 *         medicationName=STRING 
	 *         start=DATE 
	 *         end=DATE 
	 *         ordered=BOOLEAN 
	 *         price=DOUBLE
	 *     )
	 */
	protected void sequence_InsertPrescription(ISerializationContext context, InsertPrescription semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__PRESCRIPTION_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__PRESCRIPTION_ID));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__RECORD_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__RECORD_ID));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__MEDICATION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__MEDICATION_NAME));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__START));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__END));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__ORDERED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__ORDERED));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__PRICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INSERT_PRESCRIPTION__PRICE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertPrescriptionAccess().getPrescriptionIdINTTerminalRuleCall_2_0(), semanticObject.getPrescriptionId());
		feeder.accept(grammarAccess.getInsertPrescriptionAccess().getRecordIdINTTerminalRuleCall_4_0(), semanticObject.getRecordId());
		feeder.accept(grammarAccess.getInsertPrescriptionAccess().getMedicationNameSTRINGTerminalRuleCall_6_0(), semanticObject.getMedicationName());
		feeder.accept(grammarAccess.getInsertPrescriptionAccess().getStartDATETerminalRuleCall_8_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getInsertPrescriptionAccess().getEndDATETerminalRuleCall_10_0(), semanticObject.getEnd());
		feeder.accept(grammarAccess.getInsertPrescriptionAccess().getOrderedBOOLEANTerminalRuleCall_12_0(), semanticObject.getOrdered());
		feeder.accept(grammarAccess.getInsertPrescriptionAccess().getPriceDOUBLETerminalRuleCall_14_0(), semanticObject.getPrice());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     queryType+=QueryType+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns SelectMedicalRecord
	 *     Select returns SelectMedicalRecord
	 *     SelectMedicalRecord returns SelectMedicalRecord
	 *
	 * Constraint:
	 *     (variableMedicalRecord+=VariableMedicalRecord variableMedicalRecordNext+=VariableMedicalRecord* where+=WhereMedicalRecord*)
	 */
	protected void sequence_SelectMedicalRecord(ISerializationContext context, SelectMedicalRecord semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns SelectPatientMonitoring
	 *     Select returns SelectPatientMonitoring
	 *     SelectPatientMonitoring returns SelectPatientMonitoring
	 *
	 * Constraint:
	 *     (variablePatientMonitoring=VariablePatientMonitoring variablePatientMonitoringNext+=VariablePatientMonitoring* where+=WherePatientMonitoring*)
	 */
	protected void sequence_SelectPatientMonitoring(ISerializationContext context, SelectPatientMonitoring semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryType returns SelectPrescription
	 *     Select returns SelectPrescription
	 *     SelectPrescription returns SelectPrescription
	 *
	 * Constraint:
	 *     (variablePrescription=VariablePrescription variablePrescriptionNext+=VariablePrescription* where+=WherePrescription*)
	 */
	protected void sequence_SelectPrescription(ISerializationContext context, SelectPrescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WhereMedicalRecord returns WhereMedicalRecord
	 *
	 * Constraint:
	 *     (
	 *         recordId+=INT | 
	 *         patientId+=INT | 
	 *         doctorId+=INT | 
	 *         medicalCondition+=MedicalCondition | 
	 *         date+=DATE | 
	 *         price+=DOUBLE | 
	 *         description+=STRING
	 *     )
	 */
	protected void sequence_WhereMedicalRecord(ISerializationContext context, WhereMedicalRecord semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WherePatientMonitoring returns WherePatientMonitoring
	 *
	 * Constraint:
	 *     (
	 *         monitoringId+=INT | 
	 *         patientId+=INT | 
	 *         category+=MedicalCondition | 
	 *         date+=DATE | 
	 *         riskperception+=RiskPerception | 
	 *         treated+=BOOLEAN | 
	 *         deviceId+=INT
	 *     )
	 */
	protected void sequence_WherePatientMonitoring(ISerializationContext context, WherePatientMonitoring semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WherePrescription returns WherePrescription
	 *
	 * Constraint:
	 *     (
	 *         prescriptionId+=INT | 
	 *         recordId+=INT | 
	 *         medicationName+=STRING | 
	 *         start+=DATE | 
	 *         end+=DATE | 
	 *         ordered+=BOOLEAN | 
	 *         price+=DOUBLE
	 *     )
	 */
	protected void sequence_WherePrescription(ISerializationContext context, WherePrescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
