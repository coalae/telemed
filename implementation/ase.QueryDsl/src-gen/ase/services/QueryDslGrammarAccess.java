/*
 * generated by Xtext 2.12.0.M1
 */
package ase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QueryDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.Model");
		private final Assignment cQueryTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQueryTypeQueryTypeParserRuleCall_0 = (RuleCall)cQueryTypeAssignment.eContents().get(0);
		
		//Model:
		//	queryType+=QueryType*;
		@Override public ParserRule getRule() { return rule; }
		
		//queryType+=QueryType*
		public Assignment getQueryTypeAssignment() { return cQueryTypeAssignment; }
		
		//QueryType
		public RuleCall getQueryTypeQueryTypeParserRuleCall_0() { return cQueryTypeQueryTypeParserRuleCall_0; }
	}
	public class QueryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.QueryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsertParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDropParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//QueryType:
		//	Select | Insert | Drop | Delete;
		@Override public ParserRule getRule() { return rule; }
		
		//Select | Insert | Drop | Delete
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Select
		public RuleCall getSelectParserRuleCall_0() { return cSelectParserRuleCall_0; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_1() { return cInsertParserRuleCall_1; }
		
		//Drop
		public RuleCall getDropParserRuleCall_2() { return cDropParserRuleCall_2; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_3() { return cDeleteParserRuleCall_3; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSelectMedicalRecordParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSelectPatientMonitoringParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSelectPrescriptionParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		////-------------Select--------------------
		//Select:
		//	'SELECT' (SelectMedicalRecord | SelectPatientMonitoring | SelectPrescription);
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' (SelectMedicalRecord | SelectPatientMonitoring | SelectPrescription)
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//SelectMedicalRecord | SelectPatientMonitoring | SelectPrescription
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SelectMedicalRecord
		public RuleCall getSelectMedicalRecordParserRuleCall_1_0() { return cSelectMedicalRecordParserRuleCall_1_0; }
		
		//SelectPatientMonitoring
		public RuleCall getSelectPatientMonitoringParserRuleCall_1_1() { return cSelectPatientMonitoringParserRuleCall_1_1; }
		
		//SelectPrescription
		public RuleCall getSelectPrescriptionParserRuleCall_1_2() { return cSelectPrescriptionParserRuleCall_1_2; }
	}
	public class SelectMedicalRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.SelectMedicalRecord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableMedicalRecordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableMedicalRecordVariableMedicalRecordEnumRuleCall_0_0 = (RuleCall)cVariableMedicalRecordAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariableMedicalRecordNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableMedicalRecordNextVariableMedicalRecordEnumRuleCall_1_1_0 = (RuleCall)cVariableMedicalRecordNextAssignment_1_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMedicalRecordKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHEREKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhereAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhereWhereMedicalRecordParserRuleCall_4_1_0 = (RuleCall)cWhereAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectMedicalRecord:
		//	variableMedicalRecord+=VariableMedicalRecord (',' variableMedicalRecordNext+=VariableMedicalRecord)*
		//	'From' 'MedicalRecord' ('WHERE' where+=WhereMedicalRecord+)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//variableMedicalRecord+=VariableMedicalRecord (',' variableMedicalRecordNext+=VariableMedicalRecord)* 'From'
		//'MedicalRecord' ('WHERE' where+=WhereMedicalRecord+)? ';'
		public Group getGroup() { return cGroup; }
		
		//variableMedicalRecord+=VariableMedicalRecord
		public Assignment getVariableMedicalRecordAssignment_0() { return cVariableMedicalRecordAssignment_0; }
		
		//VariableMedicalRecord
		public RuleCall getVariableMedicalRecordVariableMedicalRecordEnumRuleCall_0_0() { return cVariableMedicalRecordVariableMedicalRecordEnumRuleCall_0_0; }
		
		//(',' variableMedicalRecordNext+=VariableMedicalRecord)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//variableMedicalRecordNext+=VariableMedicalRecord
		public Assignment getVariableMedicalRecordNextAssignment_1_1() { return cVariableMedicalRecordNextAssignment_1_1; }
		
		//VariableMedicalRecord
		public RuleCall getVariableMedicalRecordNextVariableMedicalRecordEnumRuleCall_1_1_0() { return cVariableMedicalRecordNextVariableMedicalRecordEnumRuleCall_1_1_0; }
		
		//'From'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'MedicalRecord'
		public Keyword getMedicalRecordKeyword_3() { return cMedicalRecordKeyword_3; }
		
		//('WHERE' where+=WhereMedicalRecord+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_4_0() { return cWHEREKeyword_4_0; }
		
		//where+=WhereMedicalRecord+
		public Assignment getWhereAssignment_4_1() { return cWhereAssignment_4_1; }
		
		//WhereMedicalRecord
		public RuleCall getWhereWhereMedicalRecordParserRuleCall_4_1_0() { return cWhereWhereMedicalRecordParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SelectPatientMonitoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.SelectPatientMonitoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablePatientMonitoringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablePatientMonitoringVariablePatientMonitoringEnumRuleCall_0_0 = (RuleCall)cVariablePatientMonitoringAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablePatientMonitoringNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablePatientMonitoringNextVariablePatientMonitoringEnumRuleCall_1_1_0 = (RuleCall)cVariablePatientMonitoringNextAssignment_1_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPatientMonitoringKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHEREKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhereAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhereWherePatientMonitoringParserRuleCall_4_1_0 = (RuleCall)cWhereAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectPatientMonitoring:
		//	variablePatientMonitoring=VariablePatientMonitoring (',' variablePatientMonitoringNext+=VariablePatientMonitoring)*
		//	'From' 'PatientMonitoring' ('WHERE' where+=WherePatientMonitoring+)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//variablePatientMonitoring=VariablePatientMonitoring (',' variablePatientMonitoringNext+=VariablePatientMonitoring)*
		//'From' 'PatientMonitoring' ('WHERE' where+=WherePatientMonitoring+)? ';'
		public Group getGroup() { return cGroup; }
		
		//variablePatientMonitoring=VariablePatientMonitoring
		public Assignment getVariablePatientMonitoringAssignment_0() { return cVariablePatientMonitoringAssignment_0; }
		
		//VariablePatientMonitoring
		public RuleCall getVariablePatientMonitoringVariablePatientMonitoringEnumRuleCall_0_0() { return cVariablePatientMonitoringVariablePatientMonitoringEnumRuleCall_0_0; }
		
		//(',' variablePatientMonitoringNext+=VariablePatientMonitoring)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//variablePatientMonitoringNext+=VariablePatientMonitoring
		public Assignment getVariablePatientMonitoringNextAssignment_1_1() { return cVariablePatientMonitoringNextAssignment_1_1; }
		
		//VariablePatientMonitoring
		public RuleCall getVariablePatientMonitoringNextVariablePatientMonitoringEnumRuleCall_1_1_0() { return cVariablePatientMonitoringNextVariablePatientMonitoringEnumRuleCall_1_1_0; }
		
		//'From'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'PatientMonitoring'
		public Keyword getPatientMonitoringKeyword_3() { return cPatientMonitoringKeyword_3; }
		
		//('WHERE' where+=WherePatientMonitoring+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_4_0() { return cWHEREKeyword_4_0; }
		
		//where+=WherePatientMonitoring+
		public Assignment getWhereAssignment_4_1() { return cWhereAssignment_4_1; }
		
		//WherePatientMonitoring
		public RuleCall getWhereWherePatientMonitoringParserRuleCall_4_1_0() { return cWhereWherePatientMonitoringParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SelectPrescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.SelectPrescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablePrescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablePrescriptionVariablePrescriptionEnumRuleCall_0_0 = (RuleCall)cVariablePrescriptionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablePrescriptionNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablePrescriptionNextVariablePrescriptionEnumRuleCall_1_1_0 = (RuleCall)cVariablePrescriptionNextAssignment_1_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPrescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHEREKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhereAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhereWherePrescriptionParserRuleCall_4_1_0 = (RuleCall)cWhereAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectPrescription:
		//	variablePrescription=VariablePrescription (',' variablePrescriptionNext+=VariablePrescription)*
		//	'From' 'Prescription' ('WHERE' where+=WherePrescription+)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//variablePrescription=VariablePrescription (',' variablePrescriptionNext+=VariablePrescription)* 'From' 'Prescription'
		//('WHERE' where+=WherePrescription+)? ';'
		public Group getGroup() { return cGroup; }
		
		//variablePrescription=VariablePrescription
		public Assignment getVariablePrescriptionAssignment_0() { return cVariablePrescriptionAssignment_0; }
		
		//VariablePrescription
		public RuleCall getVariablePrescriptionVariablePrescriptionEnumRuleCall_0_0() { return cVariablePrescriptionVariablePrescriptionEnumRuleCall_0_0; }
		
		//(',' variablePrescriptionNext+=VariablePrescription)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//variablePrescriptionNext+=VariablePrescription
		public Assignment getVariablePrescriptionNextAssignment_1_1() { return cVariablePrescriptionNextAssignment_1_1; }
		
		//VariablePrescription
		public RuleCall getVariablePrescriptionNextVariablePrescriptionEnumRuleCall_1_1_0() { return cVariablePrescriptionNextVariablePrescriptionEnumRuleCall_1_1_0; }
		
		//'From'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'Prescription'
		public Keyword getPrescriptionKeyword_3() { return cPrescriptionKeyword_3; }
		
		//('WHERE' where+=WherePrescription+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_4_0() { return cWHEREKeyword_4_0; }
		
		//where+=WherePrescription+
		public Assignment getWhereAssignment_4_1() { return cWhereAssignment_4_1; }
		
		//WherePrescription
		public RuleCall getWhereWherePrescriptionParserRuleCall_4_1_0() { return cWhereWherePrescriptionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINSERTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cINTOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cInsertMedicalRecordParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cInsertPatientMonitoringParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cInsertPrescriptionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		////-------------Insert--------------------
		//Insert:
		//	'INSERT' 'INTO' (InsertMedicalRecord | InsertPatientMonitoring | InsertPrescription);
		@Override public ParserRule getRule() { return rule; }
		
		//'INSERT' 'INTO' (InsertMedicalRecord | InsertPatientMonitoring | InsertPrescription)
		public Group getGroup() { return cGroup; }
		
		//'INSERT'
		public Keyword getINSERTKeyword_0() { return cINSERTKeyword_0; }
		
		//'INTO'
		public Keyword getINTOKeyword_1() { return cINTOKeyword_1; }
		
		//InsertMedicalRecord | InsertPatientMonitoring | InsertPrescription
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//InsertMedicalRecord
		public RuleCall getInsertMedicalRecordParserRuleCall_2_0() { return cInsertMedicalRecordParserRuleCall_2_0; }
		
		//InsertPatientMonitoring
		public RuleCall getInsertPatientMonitoringParserRuleCall_2_1() { return cInsertPatientMonitoringParserRuleCall_2_1; }
		
		//InsertPrescription
		public RuleCall getInsertPrescriptionParserRuleCall_2_2() { return cInsertPrescriptionParserRuleCall_2_2; }
	}
	public class InsertMedicalRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.InsertMedicalRecord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMedicalRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cValuesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRecordIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecordIdINTTerminalRuleCall_2_0 = (RuleCall)cRecordIdAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatientIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatientIdINTTerminalRuleCall_4_0 = (RuleCall)cPatientIdAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDoctorIdAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDoctorIdINTTerminalRuleCall_6_0 = (RuleCall)cDoctorIdAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMedicalConditionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMedicalConditionMedicalConditionEnumRuleCall_8_0 = (RuleCall)cMedicalConditionAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDateAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDateDATETerminalRuleCall_10_0 = (RuleCall)cDateAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPriceAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPriceDOUBLETerminalRuleCall_12_0 = (RuleCall)cPriceAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cDescriptionAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_14_0 = (RuleCall)cDescriptionAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cSemicolonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//InsertMedicalRecord:
		//	'MedicalRecord'
		//	'Values(' recordId=INT ','
		//	patientId=INT ','
		//	doctorId=INT ','
		//	medicalCondition=MedicalCondition ','
		//	date=DATE ','
		//	price=DOUBLE ','
		//	description=STRING
		//	')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'MedicalRecord' 'Values(' recordId=INT ',' patientId=INT ',' doctorId=INT ',' medicalCondition=MedicalCondition ','
		//date=DATE ',' price=DOUBLE ',' description=STRING ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'MedicalRecord'
		public Keyword getMedicalRecordKeyword_0() { return cMedicalRecordKeyword_0; }
		
		//'Values('
		public Keyword getValuesKeyword_1() { return cValuesKeyword_1; }
		
		//recordId=INT
		public Assignment getRecordIdAssignment_2() { return cRecordIdAssignment_2; }
		
		//INT
		public RuleCall getRecordIdINTTerminalRuleCall_2_0() { return cRecordIdINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//patientId=INT
		public Assignment getPatientIdAssignment_4() { return cPatientIdAssignment_4; }
		
		//INT
		public RuleCall getPatientIdINTTerminalRuleCall_4_0() { return cPatientIdINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//doctorId=INT
		public Assignment getDoctorIdAssignment_6() { return cDoctorIdAssignment_6; }
		
		//INT
		public RuleCall getDoctorIdINTTerminalRuleCall_6_0() { return cDoctorIdINTTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//medicalCondition=MedicalCondition
		public Assignment getMedicalConditionAssignment_8() { return cMedicalConditionAssignment_8; }
		
		//MedicalCondition
		public RuleCall getMedicalConditionMedicalConditionEnumRuleCall_8_0() { return cMedicalConditionMedicalConditionEnumRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//date=DATE
		public Assignment getDateAssignment_10() { return cDateAssignment_10; }
		
		//DATE
		public RuleCall getDateDATETerminalRuleCall_10_0() { return cDateDATETerminalRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//price=DOUBLE
		public Assignment getPriceAssignment_12() { return cPriceAssignment_12; }
		
		//DOUBLE
		public RuleCall getPriceDOUBLETerminalRuleCall_12_0() { return cPriceDOUBLETerminalRuleCall_12_0; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_14() { return cDescriptionAssignment_14; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_14_0() { return cDescriptionSTRINGTerminalRuleCall_14_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//';'
		public Keyword getSemicolonKeyword_16() { return cSemicolonKeyword_16; }
	}
	public class InsertPatientMonitoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.InsertPatientMonitoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatientMonitoringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cValuesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMonitoringIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonitoringIdINTTerminalRuleCall_2_0 = (RuleCall)cMonitoringIdAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatientIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatientIdINTTerminalRuleCall_4_0 = (RuleCall)cPatientIdAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCategoryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCategoryMedicalConditionEnumRuleCall_6_0 = (RuleCall)cCategoryAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDateDATETerminalRuleCall_8_0 = (RuleCall)cDateAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRiskPerceptionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRiskPerceptionRiskPerceptionEnumRuleCall_10_0 = (RuleCall)cRiskPerceptionAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTreadtedAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTreadtedBOOLEANTerminalRuleCall_12_0 = (RuleCall)cTreadtedAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cDeviceIdAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cDeviceIdINTTerminalRuleCall_14_0 = (RuleCall)cDeviceIdAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cSemicolonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//InsertPatientMonitoring:
		//	'PatientMonitoring'
		//	'Values(' monitoringId=INT ','
		//	patientId=INT ','
		//	category=MedicalCondition ','
		//	date=DATE ','
		//	riskPerception=RiskPerception ','
		//	treadted=BOOLEAN ','
		//	deviceId=INT
		//	')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'PatientMonitoring' 'Values(' monitoringId=INT ',' patientId=INT ',' category=MedicalCondition ',' date=DATE ','
		//riskPerception=RiskPerception ',' treadted=BOOLEAN ',' deviceId=INT ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'PatientMonitoring'
		public Keyword getPatientMonitoringKeyword_0() { return cPatientMonitoringKeyword_0; }
		
		//'Values('
		public Keyword getValuesKeyword_1() { return cValuesKeyword_1; }
		
		//monitoringId=INT
		public Assignment getMonitoringIdAssignment_2() { return cMonitoringIdAssignment_2; }
		
		//INT
		public RuleCall getMonitoringIdINTTerminalRuleCall_2_0() { return cMonitoringIdINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//patientId=INT
		public Assignment getPatientIdAssignment_4() { return cPatientIdAssignment_4; }
		
		//INT
		public RuleCall getPatientIdINTTerminalRuleCall_4_0() { return cPatientIdINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//category=MedicalCondition
		public Assignment getCategoryAssignment_6() { return cCategoryAssignment_6; }
		
		//MedicalCondition
		public RuleCall getCategoryMedicalConditionEnumRuleCall_6_0() { return cCategoryMedicalConditionEnumRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//date=DATE
		public Assignment getDateAssignment_8() { return cDateAssignment_8; }
		
		//DATE
		public RuleCall getDateDATETerminalRuleCall_8_0() { return cDateDATETerminalRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//riskPerception=RiskPerception
		public Assignment getRiskPerceptionAssignment_10() { return cRiskPerceptionAssignment_10; }
		
		//RiskPerception
		public RuleCall getRiskPerceptionRiskPerceptionEnumRuleCall_10_0() { return cRiskPerceptionRiskPerceptionEnumRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//treadted=BOOLEAN
		public Assignment getTreadtedAssignment_12() { return cTreadtedAssignment_12; }
		
		//BOOLEAN
		public RuleCall getTreadtedBOOLEANTerminalRuleCall_12_0() { return cTreadtedBOOLEANTerminalRuleCall_12_0; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//deviceId=INT
		public Assignment getDeviceIdAssignment_14() { return cDeviceIdAssignment_14; }
		
		//INT
		public RuleCall getDeviceIdINTTerminalRuleCall_14_0() { return cDeviceIdINTTerminalRuleCall_14_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//';'
		public Keyword getSemicolonKeyword_16() { return cSemicolonKeyword_16; }
	}
	public class InsertPrescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.InsertPrescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cValuesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPrescriptionIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrescriptionIdINTTerminalRuleCall_2_0 = (RuleCall)cPrescriptionIdAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRecordIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRecordIdINTTerminalRuleCall_4_0 = (RuleCall)cRecordIdAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMedicationNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMedicationNameSTRINGTerminalRuleCall_6_0 = (RuleCall)cMedicationNameAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStartAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStartDATETerminalRuleCall_8_0 = (RuleCall)cStartAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cEndAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cEndDATETerminalRuleCall_10_0 = (RuleCall)cEndAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cOrderedAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cOrderedBOOLEANTerminalRuleCall_12_0 = (RuleCall)cOrderedAssignment_12.eContents().get(0);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cPriceAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cPriceDOUBLETerminalRuleCall_14_0 = (RuleCall)cPriceAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cSemicolonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//InsertPrescription:
		//	'Prescription'
		//	'Values(' prescriptionId=INT ','
		//	recordId=INT ','
		//	medicationName=STRING ','
		//	start=DATE ','
		//	end=DATE ','
		//	ordered=BOOLEAN ','
		//	price=DOUBLE
		//	')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Prescription' 'Values(' prescriptionId=INT ',' recordId=INT ',' medicationName=STRING ',' start=DATE ',' end=DATE ','
		//ordered=BOOLEAN ',' price=DOUBLE ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'Prescription'
		public Keyword getPrescriptionKeyword_0() { return cPrescriptionKeyword_0; }
		
		//'Values('
		public Keyword getValuesKeyword_1() { return cValuesKeyword_1; }
		
		//prescriptionId=INT
		public Assignment getPrescriptionIdAssignment_2() { return cPrescriptionIdAssignment_2; }
		
		//INT
		public RuleCall getPrescriptionIdINTTerminalRuleCall_2_0() { return cPrescriptionIdINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//recordId=INT
		public Assignment getRecordIdAssignment_4() { return cRecordIdAssignment_4; }
		
		//INT
		public RuleCall getRecordIdINTTerminalRuleCall_4_0() { return cRecordIdINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//medicationName=STRING
		public Assignment getMedicationNameAssignment_6() { return cMedicationNameAssignment_6; }
		
		//STRING
		public RuleCall getMedicationNameSTRINGTerminalRuleCall_6_0() { return cMedicationNameSTRINGTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//start=DATE
		public Assignment getStartAssignment_8() { return cStartAssignment_8; }
		
		//DATE
		public RuleCall getStartDATETerminalRuleCall_8_0() { return cStartDATETerminalRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//end=DATE
		public Assignment getEndAssignment_10() { return cEndAssignment_10; }
		
		//DATE
		public RuleCall getEndDATETerminalRuleCall_10_0() { return cEndDATETerminalRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//ordered=BOOLEAN
		public Assignment getOrderedAssignment_12() { return cOrderedAssignment_12; }
		
		//BOOLEAN
		public RuleCall getOrderedBOOLEANTerminalRuleCall_12_0() { return cOrderedBOOLEANTerminalRuleCall_12_0; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//price=DOUBLE
		public Assignment getPriceAssignment_14() { return cPriceAssignment_14; }
		
		//DOUBLE
		public RuleCall getPriceDOUBLETerminalRuleCall_14_0() { return cPriceDOUBLETerminalRuleCall_14_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//';'
		public Keyword getSemicolonKeyword_16() { return cSemicolonKeyword_16; }
	}
	public class DropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.Drop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTable_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTable_nameTableNameEnumRuleCall_2_0 = (RuleCall)cTable_nameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////-------------Drop--------------------
		//Drop:
		//	'DROP' 'TABLE'
		//	table_name+=TableName
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'DROP' 'TABLE' table_name+=TableName ';'
		public Group getGroup() { return cGroup; }
		
		//'DROP'
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }
		
		//'TABLE'
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//table_name+=TableName
		public Assignment getTable_nameAssignment_2() { return cTable_nameAssignment_2; }
		
		//TableName
		public RuleCall getTable_nameTableNameEnumRuleCall_2_0() { return cTable_nameTableNameEnumRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.Delete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFROMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cDeleteMedicalRecordParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cDeletePatientMonitoringParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cDeletePrescriptionParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		////-------------Delete--------------------
		//Delete:
		//	'DELETE' 'FROM' (DeleteMedicalRecord | DeletePatientMonitoring | DeletePrescription);
		@Override public ParserRule getRule() { return rule; }
		
		//'DELETE' 'FROM' (DeleteMedicalRecord | DeletePatientMonitoring | DeletePrescription)
		public Group getGroup() { return cGroup; }
		
		//'DELETE'
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_1() { return cFROMKeyword_1; }
		
		//DeleteMedicalRecord | DeletePatientMonitoring | DeletePrescription
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//DeleteMedicalRecord
		public RuleCall getDeleteMedicalRecordParserRuleCall_2_0() { return cDeleteMedicalRecordParserRuleCall_2_0; }
		
		//DeletePatientMonitoring
		public RuleCall getDeletePatientMonitoringParserRuleCall_2_1() { return cDeletePatientMonitoringParserRuleCall_2_1; }
		
		//DeletePrescription
		public RuleCall getDeletePrescriptionParserRuleCall_2_2() { return cDeletePrescriptionParserRuleCall_2_2; }
	}
	public class DeleteMedicalRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.DeleteMedicalRecord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMedicalRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWHEREKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhereMedicalRecordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereMedicalRecordWhereMedicalRecordParserRuleCall_2_0 = (RuleCall)cWhereMedicalRecordAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWhereMedicalRecordAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWhereMedicalRecordWhereMedicalRecordParserRuleCall_3_1_0 = (RuleCall)cWhereMedicalRecordAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeleteMedicalRecord:
		//	'MedicalRecord' 'WHERE'
		//	whereMedicalRecord+=WhereMedicalRecord ('and' whereMedicalRecord+=WhereMedicalRecord)*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'MedicalRecord' 'WHERE' whereMedicalRecord+=WhereMedicalRecord ('and' whereMedicalRecord+=WhereMedicalRecord)* ';'
		public Group getGroup() { return cGroup; }
		
		//'MedicalRecord'
		public Keyword getMedicalRecordKeyword_0() { return cMedicalRecordKeyword_0; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_1() { return cWHEREKeyword_1; }
		
		//whereMedicalRecord+=WhereMedicalRecord
		public Assignment getWhereMedicalRecordAssignment_2() { return cWhereMedicalRecordAssignment_2; }
		
		//WhereMedicalRecord
		public RuleCall getWhereMedicalRecordWhereMedicalRecordParserRuleCall_2_0() { return cWhereMedicalRecordWhereMedicalRecordParserRuleCall_2_0; }
		
		//('and' whereMedicalRecord+=WhereMedicalRecord)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//whereMedicalRecord+=WhereMedicalRecord
		public Assignment getWhereMedicalRecordAssignment_3_1() { return cWhereMedicalRecordAssignment_3_1; }
		
		//WhereMedicalRecord
		public RuleCall getWhereMedicalRecordWhereMedicalRecordParserRuleCall_3_1_0() { return cWhereMedicalRecordWhereMedicalRecordParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DeletePatientMonitoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.DeletePatientMonitoring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatientMonitoringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWHEREKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWherepatientMonitoringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWherepatientMonitoringWherePatientMonitoringParserRuleCall_2_0 = (RuleCall)cWherepatientMonitoringAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWherepatientMonitoringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWherepatientMonitoringWherePatientMonitoringParserRuleCall_3_1_0 = (RuleCall)cWherepatientMonitoringAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeletePatientMonitoring:
		//	'PatientMonitoring' 'WHERE'
		//	wherepatientMonitoring+=WherePatientMonitoring ('and' wherepatientMonitoring+=WherePatientMonitoring)*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'PatientMonitoring' 'WHERE' wherepatientMonitoring+=WherePatientMonitoring ('and'
		//wherepatientMonitoring+=WherePatientMonitoring)* ';'
		public Group getGroup() { return cGroup; }
		
		//'PatientMonitoring'
		public Keyword getPatientMonitoringKeyword_0() { return cPatientMonitoringKeyword_0; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_1() { return cWHEREKeyword_1; }
		
		//wherepatientMonitoring+=WherePatientMonitoring
		public Assignment getWherepatientMonitoringAssignment_2() { return cWherepatientMonitoringAssignment_2; }
		
		//WherePatientMonitoring
		public RuleCall getWherepatientMonitoringWherePatientMonitoringParserRuleCall_2_0() { return cWherepatientMonitoringWherePatientMonitoringParserRuleCall_2_0; }
		
		//('and' wherepatientMonitoring+=WherePatientMonitoring)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//wherepatientMonitoring+=WherePatientMonitoring
		public Assignment getWherepatientMonitoringAssignment_3_1() { return cWherepatientMonitoringAssignment_3_1; }
		
		//WherePatientMonitoring
		public RuleCall getWherepatientMonitoringWherePatientMonitoringParserRuleCall_3_1_0() { return cWherepatientMonitoringWherePatientMonitoringParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DeletePrescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.DeletePrescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWHEREKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhereprescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereprescriptionWherePrescriptionParserRuleCall_2_0 = (RuleCall)cWhereprescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWhereprescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWhereprescriptionWherePrescriptionParserRuleCall_3_1_0 = (RuleCall)cWhereprescriptionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeletePrescription:
		//	'Prescription' 'WHERE'
		//	whereprescription+=WherePrescription ('and' whereprescription+=WherePrescription)*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Prescription' 'WHERE' whereprescription+=WherePrescription ('and' whereprescription+=WherePrescription)* ';'
		public Group getGroup() { return cGroup; }
		
		//'Prescription'
		public Keyword getPrescriptionKeyword_0() { return cPrescriptionKeyword_0; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_1() { return cWHEREKeyword_1; }
		
		//whereprescription+=WherePrescription
		public Assignment getWhereprescriptionAssignment_2() { return cWhereprescriptionAssignment_2; }
		
		//WherePrescription
		public RuleCall getWhereprescriptionWherePrescriptionParserRuleCall_2_0() { return cWhereprescriptionWherePrescriptionParserRuleCall_2_0; }
		
		//('and' whereprescription+=WherePrescription)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//whereprescription+=WherePrescription
		public Assignment getWhereprescriptionAssignment_3_1() { return cWhereprescriptionAssignment_3_1; }
		
		//WherePrescription
		public RuleCall getWhereprescriptionWherePrescriptionParserRuleCall_3_1_0() { return cWhereprescriptionWherePrescriptionParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class WhereMedicalRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.WhereMedicalRecord");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRecordIdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRecordIdAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecordIdINTTerminalRuleCall_0_2_0 = (RuleCall)cRecordIdAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPatientIdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPatientIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPatientIdINTTerminalRuleCall_1_2_0 = (RuleCall)cPatientIdAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDoctorIdKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDoctorIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDoctorIdINTTerminalRuleCall_2_2_0 = (RuleCall)cDoctorIdAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMedicalConditionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMedicalConditionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMedicalConditionMedicalConditionEnumRuleCall_3_2_0 = (RuleCall)cMedicalConditionAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cDateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDateAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDateDATETerminalRuleCall_4_2_0 = (RuleCall)cDateAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cPriceKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPriceAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPriceDOUBLETerminalRuleCall_5_2_0 = (RuleCall)cPriceAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDescriptionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_6_2_0 = (RuleCall)cDescriptionAssignment_6_2.eContents().get(0);
		
		////-------------Where--------------------
		//WhereMedicalRecord:
		//	'recordId' '=' recordId+=INT | 'patientId' '=' patientId+=INT | 'doctorId' '=' doctorId+=INT | 'medicalCondition' '='
		//	medicalCondition+=MedicalCondition | 'date' '=' date+=DATE | 'price' '=' price+=DOUBLE | 'description' '='
		//	description+=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'recordId' '=' recordId+=INT | 'patientId' '=' patientId+=INT | 'doctorId' '=' doctorId+=INT | 'medicalCondition' '='
		//medicalCondition+=MedicalCondition | 'date' '=' date+=DATE | 'price' '=' price+=DOUBLE | 'description' '='
		//description+=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'recordId' '=' recordId+=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'recordId'
		public Keyword getRecordIdKeyword_0_0() { return cRecordIdKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//recordId+=INT
		public Assignment getRecordIdAssignment_0_2() { return cRecordIdAssignment_0_2; }
		
		//INT
		public RuleCall getRecordIdINTTerminalRuleCall_0_2_0() { return cRecordIdINTTerminalRuleCall_0_2_0; }
		
		//'patientId' '=' patientId+=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'patientId'
		public Keyword getPatientIdKeyword_1_0() { return cPatientIdKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//patientId+=INT
		public Assignment getPatientIdAssignment_1_2() { return cPatientIdAssignment_1_2; }
		
		//INT
		public RuleCall getPatientIdINTTerminalRuleCall_1_2_0() { return cPatientIdINTTerminalRuleCall_1_2_0; }
		
		//'doctorId' '=' doctorId+=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//'doctorId'
		public Keyword getDoctorIdKeyword_2_0() { return cDoctorIdKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//doctorId+=INT
		public Assignment getDoctorIdAssignment_2_2() { return cDoctorIdAssignment_2_2; }
		
		//INT
		public RuleCall getDoctorIdINTTerminalRuleCall_2_2_0() { return cDoctorIdINTTerminalRuleCall_2_2_0; }
		
		//'medicalCondition' '=' medicalCondition+=MedicalCondition
		public Group getGroup_3() { return cGroup_3; }
		
		//'medicalCondition'
		public Keyword getMedicalConditionKeyword_3_0() { return cMedicalConditionKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//medicalCondition+=MedicalCondition
		public Assignment getMedicalConditionAssignment_3_2() { return cMedicalConditionAssignment_3_2; }
		
		//MedicalCondition
		public RuleCall getMedicalConditionMedicalConditionEnumRuleCall_3_2_0() { return cMedicalConditionMedicalConditionEnumRuleCall_3_2_0; }
		
		//'date' '=' date+=DATE
		public Group getGroup_4() { return cGroup_4; }
		
		//'date'
		public Keyword getDateKeyword_4_0() { return cDateKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//date+=DATE
		public Assignment getDateAssignment_4_2() { return cDateAssignment_4_2; }
		
		//DATE
		public RuleCall getDateDATETerminalRuleCall_4_2_0() { return cDateDATETerminalRuleCall_4_2_0; }
		
		//'price' '=' price+=DOUBLE
		public Group getGroup_5() { return cGroup_5; }
		
		//'price'
		public Keyword getPriceKeyword_5_0() { return cPriceKeyword_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }
		
		//price+=DOUBLE
		public Assignment getPriceAssignment_5_2() { return cPriceAssignment_5_2; }
		
		//DOUBLE
		public RuleCall getPriceDOUBLETerminalRuleCall_5_2_0() { return cPriceDOUBLETerminalRuleCall_5_2_0; }
		
		//'description' '=' description+=STRING
		public Group getGroup_6() { return cGroup_6; }
		
		//'description'
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//description+=STRING
		public Assignment getDescriptionAssignment_6_2() { return cDescriptionAssignment_6_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_6_2_0() { return cDescriptionSTRINGTerminalRuleCall_6_2_0; }
	}
	public class WherePatientMonitoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.WherePatientMonitoring");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMonitoringIdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMonitoringIdAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cMonitoringIdINTTerminalRuleCall_0_2_0 = (RuleCall)cMonitoringIdAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPatientIdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPatientIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPatientIdINTTerminalRuleCall_1_2_0 = (RuleCall)cPatientIdAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCategoryKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCategoryAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCategoryMedicalConditionEnumRuleCall_2_2_0 = (RuleCall)cCategoryAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cDateKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDateAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDateDATETerminalRuleCall_3_2_0 = (RuleCall)cDateAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cRiskPerceptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cRiskperceptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cRiskperceptionRiskPerceptionEnumRuleCall_4_2_0 = (RuleCall)cRiskperceptionAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cTreatedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTreatedAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTreatedBOOLEANTerminalRuleCall_5_2_0 = (RuleCall)cTreatedAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cDeviceIdKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDeviceIdAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDeviceIdINTTerminalRuleCall_6_2_0 = (RuleCall)cDeviceIdAssignment_6_2.eContents().get(0);
		
		//WherePatientMonitoring:
		//	'monitoringId' '=' monitoringId+=INT | 'patientId' '=' patientId+=INT | 'category' '=' category+=MedicalCondition |
		//	'date' '=' date+=DATE | 'riskPerception' '=' riskperception+=RiskPerception | 'treated' '=' treated+=BOOLEAN |
		//	'deviceId' '=' deviceId+=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'monitoringId' '=' monitoringId+=INT | 'patientId' '=' patientId+=INT | 'category' '=' category+=MedicalCondition |
		//'date' '=' date+=DATE | 'riskPerception' '=' riskperception+=RiskPerception | 'treated' '=' treated+=BOOLEAN |
		//'deviceId' '=' deviceId+=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'monitoringId' '=' monitoringId+=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'monitoringId'
		public Keyword getMonitoringIdKeyword_0_0() { return cMonitoringIdKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//monitoringId+=INT
		public Assignment getMonitoringIdAssignment_0_2() { return cMonitoringIdAssignment_0_2; }
		
		//INT
		public RuleCall getMonitoringIdINTTerminalRuleCall_0_2_0() { return cMonitoringIdINTTerminalRuleCall_0_2_0; }
		
		//'patientId' '=' patientId+=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'patientId'
		public Keyword getPatientIdKeyword_1_0() { return cPatientIdKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//patientId+=INT
		public Assignment getPatientIdAssignment_1_2() { return cPatientIdAssignment_1_2; }
		
		//INT
		public RuleCall getPatientIdINTTerminalRuleCall_1_2_0() { return cPatientIdINTTerminalRuleCall_1_2_0; }
		
		//'category' '=' category+=MedicalCondition
		public Group getGroup_2() { return cGroup_2; }
		
		//'category'
		public Keyword getCategoryKeyword_2_0() { return cCategoryKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//category+=MedicalCondition
		public Assignment getCategoryAssignment_2_2() { return cCategoryAssignment_2_2; }
		
		//MedicalCondition
		public RuleCall getCategoryMedicalConditionEnumRuleCall_2_2_0() { return cCategoryMedicalConditionEnumRuleCall_2_2_0; }
		
		//'date' '=' date+=DATE
		public Group getGroup_3() { return cGroup_3; }
		
		//'date'
		public Keyword getDateKeyword_3_0() { return cDateKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//date+=DATE
		public Assignment getDateAssignment_3_2() { return cDateAssignment_3_2; }
		
		//DATE
		public RuleCall getDateDATETerminalRuleCall_3_2_0() { return cDateDATETerminalRuleCall_3_2_0; }
		
		//'riskPerception' '=' riskperception+=RiskPerception
		public Group getGroup_4() { return cGroup_4; }
		
		//'riskPerception'
		public Keyword getRiskPerceptionKeyword_4_0() { return cRiskPerceptionKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//riskperception+=RiskPerception
		public Assignment getRiskperceptionAssignment_4_2() { return cRiskperceptionAssignment_4_2; }
		
		//RiskPerception
		public RuleCall getRiskperceptionRiskPerceptionEnumRuleCall_4_2_0() { return cRiskperceptionRiskPerceptionEnumRuleCall_4_2_0; }
		
		//'treated' '=' treated+=BOOLEAN
		public Group getGroup_5() { return cGroup_5; }
		
		//'treated'
		public Keyword getTreatedKeyword_5_0() { return cTreatedKeyword_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }
		
		//treated+=BOOLEAN
		public Assignment getTreatedAssignment_5_2() { return cTreatedAssignment_5_2; }
		
		//BOOLEAN
		public RuleCall getTreatedBOOLEANTerminalRuleCall_5_2_0() { return cTreatedBOOLEANTerminalRuleCall_5_2_0; }
		
		//'deviceId' '=' deviceId+=INT
		public Group getGroup_6() { return cGroup_6; }
		
		//'deviceId'
		public Keyword getDeviceIdKeyword_6_0() { return cDeviceIdKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//deviceId+=INT
		public Assignment getDeviceIdAssignment_6_2() { return cDeviceIdAssignment_6_2; }
		
		//INT
		public RuleCall getDeviceIdINTTerminalRuleCall_6_2_0() { return cDeviceIdINTTerminalRuleCall_6_2_0; }
	}
	public class WherePrescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.WherePrescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPrescriptionIdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPrescriptionIdAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPrescriptionIdINTTerminalRuleCall_0_2_0 = (RuleCall)cPrescriptionIdAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRecordIdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRecordIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecordIdINTTerminalRuleCall_1_2_0 = (RuleCall)cRecordIdAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMedicationNameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMedicationNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMedicationNameSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cMedicationNameAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cStartKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStartAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStartDATETerminalRuleCall_3_2_0 = (RuleCall)cStartAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cEndKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEndAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEndDATETerminalRuleCall_4_2_0 = (RuleCall)cEndAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cOrderedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOrderedAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOrderedBOOLEANTerminalRuleCall_5_2_0 = (RuleCall)cOrderedAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cPriceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cPriceAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPriceDOUBLETerminalRuleCall_6_2_0 = (RuleCall)cPriceAssignment_6_2.eContents().get(0);
		
		//WherePrescription:
		//	'prescriptionId' '=' prescriptionId+=INT | 'recordId' '=' recordId+=INT | 'medicationName' '=' medicationName+=STRING
		//	| 'start' '=' start+=DATE | 'end' '=' end+=DATE | 'ordered' '=' ordered+=BOOLEAN | 'price' '=' price+=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'prescriptionId' '=' prescriptionId+=INT | 'recordId' '=' recordId+=INT | 'medicationName' '=' medicationName+=STRING |
		//'start' '=' start+=DATE | 'end' '=' end+=DATE | 'ordered' '=' ordered+=BOOLEAN | 'price' '=' price+=DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'prescriptionId' '=' prescriptionId+=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'prescriptionId'
		public Keyword getPrescriptionIdKeyword_0_0() { return cPrescriptionIdKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//prescriptionId+=INT
		public Assignment getPrescriptionIdAssignment_0_2() { return cPrescriptionIdAssignment_0_2; }
		
		//INT
		public RuleCall getPrescriptionIdINTTerminalRuleCall_0_2_0() { return cPrescriptionIdINTTerminalRuleCall_0_2_0; }
		
		//'recordId' '=' recordId+=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'recordId'
		public Keyword getRecordIdKeyword_1_0() { return cRecordIdKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//recordId+=INT
		public Assignment getRecordIdAssignment_1_2() { return cRecordIdAssignment_1_2; }
		
		//INT
		public RuleCall getRecordIdINTTerminalRuleCall_1_2_0() { return cRecordIdINTTerminalRuleCall_1_2_0; }
		
		//'medicationName' '=' medicationName+=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//'medicationName'
		public Keyword getMedicationNameKeyword_2_0() { return cMedicationNameKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//medicationName+=STRING
		public Assignment getMedicationNameAssignment_2_2() { return cMedicationNameAssignment_2_2; }
		
		//STRING
		public RuleCall getMedicationNameSTRINGTerminalRuleCall_2_2_0() { return cMedicationNameSTRINGTerminalRuleCall_2_2_0; }
		
		//'start' '=' start+=DATE
		public Group getGroup_3() { return cGroup_3; }
		
		//'start'
		public Keyword getStartKeyword_3_0() { return cStartKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//start+=DATE
		public Assignment getStartAssignment_3_2() { return cStartAssignment_3_2; }
		
		//DATE
		public RuleCall getStartDATETerminalRuleCall_3_2_0() { return cStartDATETerminalRuleCall_3_2_0; }
		
		//'end' '=' end+=DATE
		public Group getGroup_4() { return cGroup_4; }
		
		//'end'
		public Keyword getEndKeyword_4_0() { return cEndKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//end+=DATE
		public Assignment getEndAssignment_4_2() { return cEndAssignment_4_2; }
		
		//DATE
		public RuleCall getEndDATETerminalRuleCall_4_2_0() { return cEndDATETerminalRuleCall_4_2_0; }
		
		//'ordered' '=' ordered+=BOOLEAN
		public Group getGroup_5() { return cGroup_5; }
		
		//'ordered'
		public Keyword getOrderedKeyword_5_0() { return cOrderedKeyword_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }
		
		//ordered+=BOOLEAN
		public Assignment getOrderedAssignment_5_2() { return cOrderedAssignment_5_2; }
		
		//BOOLEAN
		public RuleCall getOrderedBOOLEANTerminalRuleCall_5_2_0() { return cOrderedBOOLEANTerminalRuleCall_5_2_0; }
		
		//'price' '=' price+=DOUBLE
		public Group getGroup_6() { return cGroup_6; }
		
		//'price'
		public Keyword getPriceKeyword_6_0() { return cPriceKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//price+=DOUBLE
		public Assignment getPriceAssignment_6_2() { return cPriceAssignment_6_2; }
		
		//DOUBLE
		public RuleCall getPriceDOUBLETerminalRuleCall_6_2_0() { return cPriceDOUBLETerminalRuleCall_6_2_0; }
	}
	
	public class TableNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.TableName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMedicalRecordEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMedicalRecordMedicalRecordKeyword_0_0 = (Keyword)cMedicalRecordEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPatientMonitoringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPatientMonitoringPatientMonitoringKeyword_1_0 = (Keyword)cPatientMonitoringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrescriptionEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrescriptionPrescriptionKeyword_2_0 = (Keyword)cPrescriptionEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TableName:
		//	MedicalRecord | PatientMonitoring | Prescription;
		public EnumRule getRule() { return rule; }
		
		//MedicalRecord | PatientMonitoring | Prescription
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MedicalRecord
		public EnumLiteralDeclaration getMedicalRecordEnumLiteralDeclaration_0() { return cMedicalRecordEnumLiteralDeclaration_0; }
		
		//"MedicalRecord"
		public Keyword getMedicalRecordMedicalRecordKeyword_0_0() { return cMedicalRecordMedicalRecordKeyword_0_0; }
		
		//PatientMonitoring
		public EnumLiteralDeclaration getPatientMonitoringEnumLiteralDeclaration_1() { return cPatientMonitoringEnumLiteralDeclaration_1; }
		
		//"PatientMonitoring"
		public Keyword getPatientMonitoringPatientMonitoringKeyword_1_0() { return cPatientMonitoringPatientMonitoringKeyword_1_0; }
		
		//Prescription
		public EnumLiteralDeclaration getPrescriptionEnumLiteralDeclaration_2() { return cPrescriptionEnumLiteralDeclaration_2; }
		
		//"Prescription"
		public Keyword getPrescriptionPrescriptionKeyword_2_0() { return cPrescriptionPrescriptionKeyword_2_0; }
	}
	public class VariableMedicalRecordElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.VariableMedicalRecord");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRecordIdEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRecordIdRecordIdKeyword_0_0 = (Keyword)cRecordIdEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPatientIdEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPatientIdPatientIdKeyword_1_0 = (Keyword)cPatientIdEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDoctorIdEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDoctorIdDoctorIdKeyword_2_0 = (Keyword)cDoctorIdEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMedicalConditionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMedicalConditionMedicalConditionKeyword_3_0 = (Keyword)cMedicalConditionEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateDateKeyword_4_0 = (Keyword)cDateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPriceEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPricePriceKeyword_5_0 = (Keyword)cPriceEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDescriptionEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDescriptionDescriptionKeyword_6_0 = (Keyword)cDescriptionEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum VariableMedicalRecord:
		//	recordId | patientId | doctorId | medicalCondition | date | price | description;
		public EnumRule getRule() { return rule; }
		
		//recordId | patientId | doctorId | medicalCondition | date | price | description
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//recordId
		public EnumLiteralDeclaration getRecordIdEnumLiteralDeclaration_0() { return cRecordIdEnumLiteralDeclaration_0; }
		
		//"recordId"
		public Keyword getRecordIdRecordIdKeyword_0_0() { return cRecordIdRecordIdKeyword_0_0; }
		
		//patientId
		public EnumLiteralDeclaration getPatientIdEnumLiteralDeclaration_1() { return cPatientIdEnumLiteralDeclaration_1; }
		
		//"patientId"
		public Keyword getPatientIdPatientIdKeyword_1_0() { return cPatientIdPatientIdKeyword_1_0; }
		
		//doctorId
		public EnumLiteralDeclaration getDoctorIdEnumLiteralDeclaration_2() { return cDoctorIdEnumLiteralDeclaration_2; }
		
		//"doctorId"
		public Keyword getDoctorIdDoctorIdKeyword_2_0() { return cDoctorIdDoctorIdKeyword_2_0; }
		
		//medicalCondition
		public EnumLiteralDeclaration getMedicalConditionEnumLiteralDeclaration_3() { return cMedicalConditionEnumLiteralDeclaration_3; }
		
		//"medicalCondition"
		public Keyword getMedicalConditionMedicalConditionKeyword_3_0() { return cMedicalConditionMedicalConditionKeyword_3_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_4() { return cDateEnumLiteralDeclaration_4; }
		
		//"date"
		public Keyword getDateDateKeyword_4_0() { return cDateDateKeyword_4_0; }
		
		//price
		public EnumLiteralDeclaration getPriceEnumLiteralDeclaration_5() { return cPriceEnumLiteralDeclaration_5; }
		
		//"price"
		public Keyword getPricePriceKeyword_5_0() { return cPricePriceKeyword_5_0; }
		
		//description
		public EnumLiteralDeclaration getDescriptionEnumLiteralDeclaration_6() { return cDescriptionEnumLiteralDeclaration_6; }
		
		//"description"
		public Keyword getDescriptionDescriptionKeyword_6_0() { return cDescriptionDescriptionKeyword_6_0; }
	}
	public class VariablePatientMonitoringElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.VariablePatientMonitoring");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMonitoringIdEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMonitoringIdMonitoringIdKeyword_0_0 = (Keyword)cMonitoringIdEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPatientIdEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPatientIdPatientIdKeyword_1_0 = (Keyword)cPatientIdEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCategoryEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCategoryCategoryKeyword_2_0 = (Keyword)cCategoryEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRiskPerceptionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRiskPerceptionRiskPerceptionKeyword_4_0 = (Keyword)cRiskPerceptionEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTreatedEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTreatedTreatedKeyword_5_0 = (Keyword)cTreatedEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDeviceIdEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDeviceIdDeviceIdKeyword_6_0 = (Keyword)cDeviceIdEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum VariablePatientMonitoring:
		//	monitoringId | patientId | category | date | riskPerception | treated | deviceId;
		public EnumRule getRule() { return rule; }
		
		//monitoringId | patientId | category | date | riskPerception | treated | deviceId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//monitoringId
		public EnumLiteralDeclaration getMonitoringIdEnumLiteralDeclaration_0() { return cMonitoringIdEnumLiteralDeclaration_0; }
		
		//"monitoringId"
		public Keyword getMonitoringIdMonitoringIdKeyword_0_0() { return cMonitoringIdMonitoringIdKeyword_0_0; }
		
		//patientId
		public EnumLiteralDeclaration getPatientIdEnumLiteralDeclaration_1() { return cPatientIdEnumLiteralDeclaration_1; }
		
		//"patientId"
		public Keyword getPatientIdPatientIdKeyword_1_0() { return cPatientIdPatientIdKeyword_1_0; }
		
		//category
		public EnumLiteralDeclaration getCategoryEnumLiteralDeclaration_2() { return cCategoryEnumLiteralDeclaration_2; }
		
		//"category"
		public Keyword getCategoryCategoryKeyword_2_0() { return cCategoryCategoryKeyword_2_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//"date"
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
		
		//riskPerception
		public EnumLiteralDeclaration getRiskPerceptionEnumLiteralDeclaration_4() { return cRiskPerceptionEnumLiteralDeclaration_4; }
		
		//"riskPerception"
		public Keyword getRiskPerceptionRiskPerceptionKeyword_4_0() { return cRiskPerceptionRiskPerceptionKeyword_4_0; }
		
		//treated
		public EnumLiteralDeclaration getTreatedEnumLiteralDeclaration_5() { return cTreatedEnumLiteralDeclaration_5; }
		
		//"treated"
		public Keyword getTreatedTreatedKeyword_5_0() { return cTreatedTreatedKeyword_5_0; }
		
		//deviceId
		public EnumLiteralDeclaration getDeviceIdEnumLiteralDeclaration_6() { return cDeviceIdEnumLiteralDeclaration_6; }
		
		//"deviceId"
		public Keyword getDeviceIdDeviceIdKeyword_6_0() { return cDeviceIdDeviceIdKeyword_6_0; }
	}
	public class VariablePrescriptionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.VariablePrescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPrescriptionIdEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPrescriptionIdPrescriptionIdKeyword_0_0 = (Keyword)cPrescriptionIdEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRecordIdEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRecordIdRecordIdKeyword_1_0 = (Keyword)cRecordIdEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMedicationNameEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMedicationNameMedicationNameKeyword_2_0 = (Keyword)cMedicationNameEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStartStartKeyword_3_0 = (Keyword)cStartEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEndEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEndEndKeyword_4_0 = (Keyword)cEndEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOrderedEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOrderedOrderedKeyword_5_0 = (Keyword)cOrderedEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPriceEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPricePriceKeyword_6_0 = (Keyword)cPriceEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum VariablePrescription:
		//	prescriptionId | recordId | medicationName | start | end | ordered | price;
		public EnumRule getRule() { return rule; }
		
		//prescriptionId | recordId | medicationName | start | end | ordered | price
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//prescriptionId
		public EnumLiteralDeclaration getPrescriptionIdEnumLiteralDeclaration_0() { return cPrescriptionIdEnumLiteralDeclaration_0; }
		
		//"prescriptionId"
		public Keyword getPrescriptionIdPrescriptionIdKeyword_0_0() { return cPrescriptionIdPrescriptionIdKeyword_0_0; }
		
		//recordId
		public EnumLiteralDeclaration getRecordIdEnumLiteralDeclaration_1() { return cRecordIdEnumLiteralDeclaration_1; }
		
		//"recordId"
		public Keyword getRecordIdRecordIdKeyword_1_0() { return cRecordIdRecordIdKeyword_1_0; }
		
		//medicationName
		public EnumLiteralDeclaration getMedicationNameEnumLiteralDeclaration_2() { return cMedicationNameEnumLiteralDeclaration_2; }
		
		//"medicationName"
		public Keyword getMedicationNameMedicationNameKeyword_2_0() { return cMedicationNameMedicationNameKeyword_2_0; }
		
		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_3() { return cStartEnumLiteralDeclaration_3; }
		
		//"start"
		public Keyword getStartStartKeyword_3_0() { return cStartStartKeyword_3_0; }
		
		//end
		public EnumLiteralDeclaration getEndEnumLiteralDeclaration_4() { return cEndEnumLiteralDeclaration_4; }
		
		//"end"
		public Keyword getEndEndKeyword_4_0() { return cEndEndKeyword_4_0; }
		
		//ordered
		public EnumLiteralDeclaration getOrderedEnumLiteralDeclaration_5() { return cOrderedEnumLiteralDeclaration_5; }
		
		//"ordered"
		public Keyword getOrderedOrderedKeyword_5_0() { return cOrderedOrderedKeyword_5_0; }
		
		//price
		public EnumLiteralDeclaration getPriceEnumLiteralDeclaration_6() { return cPriceEnumLiteralDeclaration_6; }
		
		//"price"
		public Keyword getPricePriceKeyword_6_0() { return cPricePriceKeyword_6_0; }
	}
	public class MedicalConditionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.MedicalCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBronchitisEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBronchitisBronchitisKeyword_0_0 = (Keyword)cBronchitisEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAsthmaEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAsthmaAsthmaKeyword_1_0 = (Keyword)cAsthmaEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDiabetesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDiabetesDiabetesKeyword_2_0 = (Keyword)cDiabetesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFluEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFluFluKeyword_3_0 = (Keyword)cFluEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cHypertensionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cHypertensionHypertensionKeyword_4_0 = (Keyword)cHypertensionEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum MedicalCondition:
		//	Bronchitis | Asthma | Diabetes | Flu | Hypertension;
		public EnumRule getRule() { return rule; }
		
		//Bronchitis | Asthma | Diabetes | Flu | Hypertension
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Bronchitis
		public EnumLiteralDeclaration getBronchitisEnumLiteralDeclaration_0() { return cBronchitisEnumLiteralDeclaration_0; }
		
		//"Bronchitis"
		public Keyword getBronchitisBronchitisKeyword_0_0() { return cBronchitisBronchitisKeyword_0_0; }
		
		//Asthma
		public EnumLiteralDeclaration getAsthmaEnumLiteralDeclaration_1() { return cAsthmaEnumLiteralDeclaration_1; }
		
		//"Asthma"
		public Keyword getAsthmaAsthmaKeyword_1_0() { return cAsthmaAsthmaKeyword_1_0; }
		
		//Diabetes
		public EnumLiteralDeclaration getDiabetesEnumLiteralDeclaration_2() { return cDiabetesEnumLiteralDeclaration_2; }
		
		//"Diabetes"
		public Keyword getDiabetesDiabetesKeyword_2_0() { return cDiabetesDiabetesKeyword_2_0; }
		
		//Flu
		public EnumLiteralDeclaration getFluEnumLiteralDeclaration_3() { return cFluEnumLiteralDeclaration_3; }
		
		//"Flu"
		public Keyword getFluFluKeyword_3_0() { return cFluFluKeyword_3_0; }
		
		//Hypertension
		public EnumLiteralDeclaration getHypertensionEnumLiteralDeclaration_4() { return cHypertensionEnumLiteralDeclaration_4; }
		
		//"Hypertension"
		public Keyword getHypertensionHypertensionKeyword_4_0() { return cHypertensionHypertensionKeyword_4_0; }
	}
	public class RiskPerceptionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.RiskPerception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHighHighKeyword_0_0 = (Keyword)cHighEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMediumMediumKeyword_1_0 = (Keyword)cMediumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLowLowKeyword_2_0 = (Keyword)cLowEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RiskPerception:
		//	High | Medium | Low;
		public EnumRule getRule() { return rule; }
		
		//High | Medium | Low
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//High
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_0() { return cHighEnumLiteralDeclaration_0; }
		
		//"High"
		public Keyword getHighHighKeyword_0_0() { return cHighHighKeyword_0_0; }
		
		//Medium
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_1() { return cMediumEnumLiteralDeclaration_1; }
		
		//"Medium"
		public Keyword getMediumMediumKeyword_1_0() { return cMediumMediumKeyword_1_0; }
		
		//Low
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_2() { return cLowEnumLiteralDeclaration_2; }
		
		//"Low"
		public Keyword getLowLowKeyword_2_0() { return cLowLowKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final QueryTypeElements pQueryType;
	private final SelectElements pSelect;
	private final SelectMedicalRecordElements pSelectMedicalRecord;
	private final SelectPatientMonitoringElements pSelectPatientMonitoring;
	private final SelectPrescriptionElements pSelectPrescription;
	private final InsertElements pInsert;
	private final InsertMedicalRecordElements pInsertMedicalRecord;
	private final InsertPatientMonitoringElements pInsertPatientMonitoring;
	private final InsertPrescriptionElements pInsertPrescription;
	private final DropElements pDrop;
	private final DeleteElements pDelete;
	private final DeleteMedicalRecordElements pDeleteMedicalRecord;
	private final DeletePatientMonitoringElements pDeletePatientMonitoring;
	private final DeletePrescriptionElements pDeletePrescription;
	private final WhereMedicalRecordElements pWhereMedicalRecord;
	private final WherePatientMonitoringElements pWherePatientMonitoring;
	private final WherePrescriptionElements pWherePrescription;
	private final TableNameElements eTableName;
	private final VariableMedicalRecordElements eVariableMedicalRecord;
	private final VariablePatientMonitoringElements eVariablePatientMonitoring;
	private final VariablePrescriptionElements eVariablePrescription;
	private final MedicalConditionElements eMedicalCondition;
	private final RiskPerceptionElements eRiskPerception;
	private final TerminalRule tDATE;
	private final TerminalRule tDAY;
	private final TerminalRule tMONTH;
	private final TerminalRule tYEAR;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QueryDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQueryType = new QueryTypeElements();
		this.pSelect = new SelectElements();
		this.pSelectMedicalRecord = new SelectMedicalRecordElements();
		this.pSelectPatientMonitoring = new SelectPatientMonitoringElements();
		this.pSelectPrescription = new SelectPrescriptionElements();
		this.pInsert = new InsertElements();
		this.pInsertMedicalRecord = new InsertMedicalRecordElements();
		this.pInsertPatientMonitoring = new InsertPatientMonitoringElements();
		this.pInsertPrescription = new InsertPrescriptionElements();
		this.pDrop = new DropElements();
		this.pDelete = new DeleteElements();
		this.pDeleteMedicalRecord = new DeleteMedicalRecordElements();
		this.pDeletePatientMonitoring = new DeletePatientMonitoringElements();
		this.pDeletePrescription = new DeletePrescriptionElements();
		this.pWhereMedicalRecord = new WhereMedicalRecordElements();
		this.pWherePatientMonitoring = new WherePatientMonitoringElements();
		this.pWherePrescription = new WherePrescriptionElements();
		this.eTableName = new TableNameElements();
		this.eVariableMedicalRecord = new VariableMedicalRecordElements();
		this.eVariablePatientMonitoring = new VariablePatientMonitoringElements();
		this.eVariablePrescription = new VariablePrescriptionElements();
		this.eMedicalCondition = new MedicalConditionElements();
		this.eRiskPerception = new RiskPerceptionElements();
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.DATE");
		this.tDAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.DAY");
		this.tMONTH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.MONTH");
		this.tYEAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.YEAR");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ase.QueryDsl.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ase.QueryDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	queryType+=QueryType*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QueryType:
	//	Select | Insert | Drop | Delete;
	public QueryTypeElements getQueryTypeAccess() {
		return pQueryType;
	}
	
	public ParserRule getQueryTypeRule() {
		return getQueryTypeAccess().getRule();
	}
	
	////-------------Select--------------------
	//Select:
	//	'SELECT' (SelectMedicalRecord | SelectPatientMonitoring | SelectPrescription);
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//SelectMedicalRecord:
	//	variableMedicalRecord+=VariableMedicalRecord (',' variableMedicalRecordNext+=VariableMedicalRecord)*
	//	'From' 'MedicalRecord' ('WHERE' where+=WhereMedicalRecord+)?
	//	';';
	public SelectMedicalRecordElements getSelectMedicalRecordAccess() {
		return pSelectMedicalRecord;
	}
	
	public ParserRule getSelectMedicalRecordRule() {
		return getSelectMedicalRecordAccess().getRule();
	}
	
	//SelectPatientMonitoring:
	//	variablePatientMonitoring=VariablePatientMonitoring (',' variablePatientMonitoringNext+=VariablePatientMonitoring)*
	//	'From' 'PatientMonitoring' ('WHERE' where+=WherePatientMonitoring+)?
	//	';';
	public SelectPatientMonitoringElements getSelectPatientMonitoringAccess() {
		return pSelectPatientMonitoring;
	}
	
	public ParserRule getSelectPatientMonitoringRule() {
		return getSelectPatientMonitoringAccess().getRule();
	}
	
	//SelectPrescription:
	//	variablePrescription=VariablePrescription (',' variablePrescriptionNext+=VariablePrescription)*
	//	'From' 'Prescription' ('WHERE' where+=WherePrescription+)?
	//	';';
	public SelectPrescriptionElements getSelectPrescriptionAccess() {
		return pSelectPrescription;
	}
	
	public ParserRule getSelectPrescriptionRule() {
		return getSelectPrescriptionAccess().getRule();
	}
	
	////-------------Insert--------------------
	//Insert:
	//	'INSERT' 'INTO' (InsertMedicalRecord | InsertPatientMonitoring | InsertPrescription);
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//InsertMedicalRecord:
	//	'MedicalRecord'
	//	'Values(' recordId=INT ','
	//	patientId=INT ','
	//	doctorId=INT ','
	//	medicalCondition=MedicalCondition ','
	//	date=DATE ','
	//	price=DOUBLE ','
	//	description=STRING
	//	')' ';';
	public InsertMedicalRecordElements getInsertMedicalRecordAccess() {
		return pInsertMedicalRecord;
	}
	
	public ParserRule getInsertMedicalRecordRule() {
		return getInsertMedicalRecordAccess().getRule();
	}
	
	//InsertPatientMonitoring:
	//	'PatientMonitoring'
	//	'Values(' monitoringId=INT ','
	//	patientId=INT ','
	//	category=MedicalCondition ','
	//	date=DATE ','
	//	riskPerception=RiskPerception ','
	//	treadted=BOOLEAN ','
	//	deviceId=INT
	//	')' ';';
	public InsertPatientMonitoringElements getInsertPatientMonitoringAccess() {
		return pInsertPatientMonitoring;
	}
	
	public ParserRule getInsertPatientMonitoringRule() {
		return getInsertPatientMonitoringAccess().getRule();
	}
	
	//InsertPrescription:
	//	'Prescription'
	//	'Values(' prescriptionId=INT ','
	//	recordId=INT ','
	//	medicationName=STRING ','
	//	start=DATE ','
	//	end=DATE ','
	//	ordered=BOOLEAN ','
	//	price=DOUBLE
	//	')' ';';
	public InsertPrescriptionElements getInsertPrescriptionAccess() {
		return pInsertPrescription;
	}
	
	public ParserRule getInsertPrescriptionRule() {
		return getInsertPrescriptionAccess().getRule();
	}
	
	////-------------Drop--------------------
	//Drop:
	//	'DROP' 'TABLE'
	//	table_name+=TableName
	//	';';
	public DropElements getDropAccess() {
		return pDrop;
	}
	
	public ParserRule getDropRule() {
		return getDropAccess().getRule();
	}
	
	////-------------Delete--------------------
	//Delete:
	//	'DELETE' 'FROM' (DeleteMedicalRecord | DeletePatientMonitoring | DeletePrescription);
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//DeleteMedicalRecord:
	//	'MedicalRecord' 'WHERE'
	//	whereMedicalRecord+=WhereMedicalRecord ('and' whereMedicalRecord+=WhereMedicalRecord)*
	//	';';
	public DeleteMedicalRecordElements getDeleteMedicalRecordAccess() {
		return pDeleteMedicalRecord;
	}
	
	public ParserRule getDeleteMedicalRecordRule() {
		return getDeleteMedicalRecordAccess().getRule();
	}
	
	//DeletePatientMonitoring:
	//	'PatientMonitoring' 'WHERE'
	//	wherepatientMonitoring+=WherePatientMonitoring ('and' wherepatientMonitoring+=WherePatientMonitoring)*
	//	';';
	public DeletePatientMonitoringElements getDeletePatientMonitoringAccess() {
		return pDeletePatientMonitoring;
	}
	
	public ParserRule getDeletePatientMonitoringRule() {
		return getDeletePatientMonitoringAccess().getRule();
	}
	
	//DeletePrescription:
	//	'Prescription' 'WHERE'
	//	whereprescription+=WherePrescription ('and' whereprescription+=WherePrescription)*
	//	';';
	public DeletePrescriptionElements getDeletePrescriptionAccess() {
		return pDeletePrescription;
	}
	
	public ParserRule getDeletePrescriptionRule() {
		return getDeletePrescriptionAccess().getRule();
	}
	
	////-------------Where--------------------
	//WhereMedicalRecord:
	//	'recordId' '=' recordId+=INT | 'patientId' '=' patientId+=INT | 'doctorId' '=' doctorId+=INT | 'medicalCondition' '='
	//	medicalCondition+=MedicalCondition | 'date' '=' date+=DATE | 'price' '=' price+=DOUBLE | 'description' '='
	//	description+=STRING;
	public WhereMedicalRecordElements getWhereMedicalRecordAccess() {
		return pWhereMedicalRecord;
	}
	
	public ParserRule getWhereMedicalRecordRule() {
		return getWhereMedicalRecordAccess().getRule();
	}
	
	//WherePatientMonitoring:
	//	'monitoringId' '=' monitoringId+=INT | 'patientId' '=' patientId+=INT | 'category' '=' category+=MedicalCondition |
	//	'date' '=' date+=DATE | 'riskPerception' '=' riskperception+=RiskPerception | 'treated' '=' treated+=BOOLEAN |
	//	'deviceId' '=' deviceId+=INT;
	public WherePatientMonitoringElements getWherePatientMonitoringAccess() {
		return pWherePatientMonitoring;
	}
	
	public ParserRule getWherePatientMonitoringRule() {
		return getWherePatientMonitoringAccess().getRule();
	}
	
	//WherePrescription:
	//	'prescriptionId' '=' prescriptionId+=INT | 'recordId' '=' recordId+=INT | 'medicationName' '=' medicationName+=STRING
	//	| 'start' '=' start+=DATE | 'end' '=' end+=DATE | 'ordered' '=' ordered+=BOOLEAN | 'price' '=' price+=DOUBLE;
	public WherePrescriptionElements getWherePrescriptionAccess() {
		return pWherePrescription;
	}
	
	public ParserRule getWherePrescriptionRule() {
		return getWherePrescriptionAccess().getRule();
	}
	
	//enum TableName:
	//	MedicalRecord | PatientMonitoring | Prescription;
	public TableNameElements getTableNameAccess() {
		return eTableName;
	}
	
	public EnumRule getTableNameRule() {
		return getTableNameAccess().getRule();
	}
	
	//enum VariableMedicalRecord:
	//	recordId | patientId | doctorId | medicalCondition | date | price | description;
	public VariableMedicalRecordElements getVariableMedicalRecordAccess() {
		return eVariableMedicalRecord;
	}
	
	public EnumRule getVariableMedicalRecordRule() {
		return getVariableMedicalRecordAccess().getRule();
	}
	
	//enum VariablePatientMonitoring:
	//	monitoringId | patientId | category | date | riskPerception | treated | deviceId;
	public VariablePatientMonitoringElements getVariablePatientMonitoringAccess() {
		return eVariablePatientMonitoring;
	}
	
	public EnumRule getVariablePatientMonitoringRule() {
		return getVariablePatientMonitoringAccess().getRule();
	}
	
	//enum VariablePrescription:
	//	prescriptionId | recordId | medicationName | start | end | ordered | price;
	public VariablePrescriptionElements getVariablePrescriptionAccess() {
		return eVariablePrescription;
	}
	
	public EnumRule getVariablePrescriptionRule() {
		return getVariablePrescriptionAccess().getRule();
	}
	
	//enum MedicalCondition:
	//	Bronchitis | Asthma | Diabetes | Flu | Hypertension;
	public MedicalConditionElements getMedicalConditionAccess() {
		return eMedicalCondition;
	}
	
	public EnumRule getMedicalConditionRule() {
		return getMedicalConditionAccess().getRule();
	}
	
	//enum RiskPerception:
	//	High | Medium | Low;
	public RiskPerceptionElements getRiskPerceptionAccess() {
		return eRiskPerception;
	}
	
	public EnumRule getRiskPerceptionRule() {
		return getRiskPerceptionAccess().getRule();
	}
	
	//terminal DATE:
	//	DAY '.' MONTH '.' YEAR;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal DAY:
	//	'1'..'9' | '1'..'3' '0'..'9';
	public TerminalRule getDAYRule() {
		return tDAY;
	}
	
	//terminal MONTH:
	//	'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' | 'Aug' | 'Sep' | 'Oct' | 'Nov' | 'Dec';
	public TerminalRule getMONTHRule() {
		return tMONTH;
	}
	
	//terminal YEAR:
	//	'0'..'2' '0'..'9' '0'..'9' '0'..'9';
	public TerminalRule getYEARRule() {
		return tYEAR;
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
